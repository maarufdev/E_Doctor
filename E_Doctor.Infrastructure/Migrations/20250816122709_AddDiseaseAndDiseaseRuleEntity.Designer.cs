// <auto-generated />
using System;
using E_Doctor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Doctor.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250816122709_AddDiseaseAndDiseaseRuleEntity")]
    partial class AddDiseaseAndDiseaseRuleEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.DiseaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.DiseaseRuleEntity", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymptomId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Days")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiseaseId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DiseaseRules");
                });

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.SymptomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Fever"
                        });
                });

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.DiseaseRuleEntity", b =>
                {
                    b.HasOne("E_Doctor.Core.Domain.Entities.DiseaseEntity", "Disease")
                        .WithMany("Rules")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Doctor.Core.Domain.Entities.SymptomEntity", "Symptom")
                        .WithMany("Rules")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.DiseaseEntity", b =>
                {
                    b.Navigation("Rules");
                });

            modelBuilder.Entity("E_Doctor.Core.Domain.Entities.SymptomEntity", b =>
                {
                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
